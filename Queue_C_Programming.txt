// Array Implementation of QUEUE

/*
    Time Complexity:
        Access -> O(n)
        Search -> O(n)
        Insertion -> O(1)

    Space Complexity: O(n)
*/
// Follow -> LIFO = Last in First Out

#include <stdio.h>
#include <stdlib.h>
#define maxsize 5

    int front = -1, rear= -1;
    int queue[maxsize];
    void insert();
    void delete();
    void display();


    void insert(){
        int item;
        printf("Enter the Element: ");
        scanf("%d", &item);

        if(rear == maxsize -1){
            printf("Queue Full \n");
            return;
        }

        if(front == -1 && rear == -1){

            front = 0;
            rear = 0;
        }else{
            rear = rear + 1;
        }

        queue[rear] = item;
        printf("Value Inserted Done \n");
    }

    void delete(){
       int item ;
       if(front == -1 || front > rear){
            printf("QUEUE is Empty \n");
            return;
       }else{

            item = queue[front];

            if(front == rear){
                front = -1;
                rear = -1;

            }
            else{
                front = front + 1;
            }

            printf("Value Deleted");

       }



    }

    void display(){
        int i;

        if(rear == -1){
            printf("Empty QUEUE \n");
        }else{
            for(i = front; i<=rear; i++){
                printf("%d\n", queue[i]);
            }
        }

    }




    int main()
    {
        printf("Enter number of elements in stack: ");
        scanf("%d", &n);

        while( choice != 4){
            printf("Choose One from the below option: ");
            printf("\n 1. push method \n 2. pop method \n 3. show method \n 4. exit \n ");
            printf("Enter Choice: ");
            scanf("%d", &choice);

            switch(choice){
                case 1:
                   {
                    push();
                    break;
                   }
                 case 2:
                   {
                    pop();
                    break;
                   }
                 case 3:
                   {
                    show();
                    break;
                   }
                case 4:
                   {
                    printf("Exiting...");
                    break;
                   }

                default :
                    {
                        printf("Enter Valid Choice.");
                    }
            }

        }

    }
